{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b models.py: class User(AbstractUser): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) has_racer = models.BooleanField(default=False) def __str__(self): return f\"{self.first_name} {self.last_name}\" class Racer(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) team = models.CharField(max_length=100) car = models.CharField(max_length=100) description = models.TextField() experience = models.IntegerField() type = models.CharField(max_length=100) class Race(models.Model): name = models.CharField(max_length=100) date = models.DateTimeField() winner = models.ForeignKey(Racer, on_delete=models.SET_NULL, blank=True, null=True) def __str__(self): return f\"{self.name}\" class RaceConnection(models.Model): racer = models.ForeignKey(Racer, on_delete=models.CASCADE) race = models.ForeignKey(Race, on_delete=models.CASCADE) class Meta: unique_together = ('racer', 'race') class Comment(models.Model): COMMENT_TYPES = ( (\"cooperation\", \"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e\"), (\"race\", \"\u0413\u043e\u043d\u043a\u0430\"), (\"other\", \"\u0414\u0440\u0443\u0433\u043e\u0435\") ) race = models.ForeignKey(Race, on_delete=models.CASCADE) author = models.ForeignKey(User, on_delete=models.CASCADE) text = models.TextField() comment_type = models.CharField(max_length=20, choices=COMMENT_TYPES) rating = models.IntegerField( validators=[MinValueValidator(0), MaxValueValidator(10)] ) created_at = models.DateTimeField(auto_now_add=True) views.py: def user_logout(request): logout(request) return render(request, 'logout.html') def user_login(request): if request.method == 'POST': form = LoginForm(request.POST) if form.is_valid(): cd = form.cleaned_data user = authenticate(username=cd['username'], password=cd['password']) if user is not None: if user.is_active: login(request, user) return redirect('profile') else: return HttpResponse('Disabled account') else: return HttpResponse('Invalid login or password') else: form = LoginForm() return render(request, 'login.html', {'form': form}) def registration(request): if request.method == \"POST\": form = RegistrationForm(request.POST) if form.is_valid(): user = form.save() user.set_password(user.password) user.save() return redirect(\"login\") else: form = RegistrationForm() return render(request, \"registration.html\", {\"user_form\": form}) def index(request): return render(request, \"index.html\") @login_required def profile(request): return render(request, 'profile.html', {'section': 'profile', 'has_racer': hasattr(request.user, 'racer')}) @login_required def racer_registration(request): user = request.user print(user.has_racer) if hasattr(request.user, \"racer\"): return HttpResponse(\"You have already got a racer\") else: if request.method == \"POST\": racer_form = RacerForm(request.POST) if racer_form.is_valid(): print(user) racer = racer_form.save(commit=False) racer.user = user racer.save() user.has_racer = True user.save() return redirect(\"profile\") else: racer_form = RacerForm() return render(request, \"racer_registration.html\", {\"racer_form\": racer_form}) @login_required def edit_user(request): if request.method == \"POST\": user_form = UserUpdateForm(request.POST, instance=request.user) if user_form.is_valid(): user_form.save() return redirect('profile') else: user_form = UserUpdateForm(instance=request.user) return render(request, \"edit_user.html\", {\"user_form\": user_form}, ) @login_required def change_password(request): if request.method == \"POST\": password_form = PasswordChangeForm(request.user, request.POST) if password_form.is_valid(): user = password_form.save() update_session_auth_hash(request, user) return redirect(\"profile\") else: password_form = PasswordChangeForm(request.user) return render(request, \"change_password.html\", {\"password_form\": password_form, }) @login_required() def edit_racer(request): if request.method == \"POST\": racer_form = RacerForm(request.POST, instance=request.user.racer) if racer_form.is_valid(): racer_form.save() return redirect(\"profile\") else: if hasattr(request.user, \"racer\"): racer_form = RacerForm(instance=getattr(request.user, \"racer\", None)) else: racer_form = None return render(request, \"edit_racer.html\", {\"racer_form\": racer_form, }) @login_required def race_comments(request, race_id): race = get_object_or_404(Race, id=race_id) comments = Comment.objects.filter(race=race) if request.method == \"POST\": form = CommentForm(request.POST) if form.is_valid(): comment = form.save(commit=False) comment.race = race comment.author = request.user comment.save() else: form = CommentForm() return render(request, \"race_comments.html\", {\"race\": race, \"comments\": comments, \"form\": form}) @login_required def races_list(request): races = Race.objects.all() race_connections = RaceConnection.objects.filter(racer=request.user.racer).values(\"race\") # print(race_connections) racer_races = [] for race_connection in race_connections: racer_races.append(race_connection['race']) # print(racer_races) return render(request, \"races_list.html\", {\"races\": races, \"race_connections\": racer_races}) @login_required def delete_account(request): if request.method == \"POST\": request.user.delete() return redirect(\"index\") return render(request, \"delete_account.html\") @login_required def create_race_connection(request, race_id): user = request.user if not (hasattr(user, \"racer\")): return HttpResponse(\"You have not got a racer\") else: try: race_connection = RaceConnection() race = Race.objects.get(pk=race_id) race_connection.race = race race_connection.racer = user.racer race_connection.save() except Exception as ex: print(ex) return HttpResponse('You have already registrated') return redirect(\"races_list\") return redirect(\"races_list\") def delete_race_connection(request, race_id): racer = request.user.racer race = Race.objects.get(pk=race_id) RaceConnection.objects.filter(racer=racer, race=race).delete() return redirect(\"races_list\") forms.py: class LoginForm(forms.Form): username = forms.CharField() password = forms.CharField(widget=forms.PasswordInput) class RegistrationForm(forms.ModelForm): class Meta: model = User fields = [\"username\", \"password\", \"first_name\", \"last_name\"] class RacerForm(forms.ModelForm): class Meta: model = Racer fields = [\"team\", \"car\", \"description\", \"experience\", \"type\"] class UserUpdateForm(forms.ModelForm): class Meta: model = User fields = [\"first_name\", \"last_name\"] class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"comment_type\", \"rating\", \"text\"] class RaceConnectionForm(forms.ModelForm): class Meta: model = RaceConnection fields = [\"race\"] urls.py: urlpatterns = [ path('admin/', admin.site.urls), path(\"\", views.index, name=\"index\"), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), path('profile/', views.profile, name='profile'), path(\"registration/\", views.registration, name=\"registration\"), path(\"racer_registration/\", views.racer_registration, name=\"racer_registration\"), path(\"edit_user/\", views.edit_user, name=\"edit_user\"), path(\"change_password/\", views.change_password, name=\"change_password\"), path(\"edit_racer/\", views.edit_racer, name=\"edit_racer\"), path(\"races/comments/<int:race_id>/\", views.race_comments, name=\"race_comments\"), path(\"races/\", views.races_list, name=\"races_list\"), path(\"profile/delete/\", views.delete_account, name=\"delete_account\"), path(\"create_race_connection/<int:race_id>/\", views.create_race_connection, name=\"create_race_connection\"), path(\"delete_race_connection/<int:race_id>\", views.delete_race_connection, name=\"delete_race_connection\") ] \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438: \u041f\u0440\u043e\u0444\u0438\u043b\u044c: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u043e\u043d\u0449\u0438\u043a\u0430: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u0449\u0438\u043a\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438: \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u043d\u043e\u043a: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0433\u043e\u043d\u043a\u0443: \u041e\u0442\u043c\u0435\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0433\u043e\u043d\u043a\u0435: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0433\u043e\u043d\u043a\u0435: \u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438: \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u043f\u0440\u043e\u0444\u0438\u043b\u044f: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430:","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_2/#no2","text":"\u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_2/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab_2/#modelspy","text":"class User(AbstractUser): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) has_racer = models.BooleanField(default=False) def __str__(self): return f\"{self.first_name} {self.last_name}\" class Racer(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) team = models.CharField(max_length=100) car = models.CharField(max_length=100) description = models.TextField() experience = models.IntegerField() type = models.CharField(max_length=100) class Race(models.Model): name = models.CharField(max_length=100) date = models.DateTimeField() winner = models.ForeignKey(Racer, on_delete=models.SET_NULL, blank=True, null=True) def __str__(self): return f\"{self.name}\" class RaceConnection(models.Model): racer = models.ForeignKey(Racer, on_delete=models.CASCADE) race = models.ForeignKey(Race, on_delete=models.CASCADE) class Meta: unique_together = ('racer', 'race') class Comment(models.Model): COMMENT_TYPES = ( (\"cooperation\", \"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e\"), (\"race\", \"\u0413\u043e\u043d\u043a\u0430\"), (\"other\", \"\u0414\u0440\u0443\u0433\u043e\u0435\") ) race = models.ForeignKey(Race, on_delete=models.CASCADE) author = models.ForeignKey(User, on_delete=models.CASCADE) text = models.TextField() comment_type = models.CharField(max_length=20, choices=COMMENT_TYPES) rating = models.IntegerField( validators=[MinValueValidator(0), MaxValueValidator(10)] ) created_at = models.DateTimeField(auto_now_add=True)","title":"models.py:"},{"location":"lab_2/#viewspy","text":"def user_logout(request): logout(request) return render(request, 'logout.html') def user_login(request): if request.method == 'POST': form = LoginForm(request.POST) if form.is_valid(): cd = form.cleaned_data user = authenticate(username=cd['username'], password=cd['password']) if user is not None: if user.is_active: login(request, user) return redirect('profile') else: return HttpResponse('Disabled account') else: return HttpResponse('Invalid login or password') else: form = LoginForm() return render(request, 'login.html', {'form': form}) def registration(request): if request.method == \"POST\": form = RegistrationForm(request.POST) if form.is_valid(): user = form.save() user.set_password(user.password) user.save() return redirect(\"login\") else: form = RegistrationForm() return render(request, \"registration.html\", {\"user_form\": form}) def index(request): return render(request, \"index.html\") @login_required def profile(request): return render(request, 'profile.html', {'section': 'profile', 'has_racer': hasattr(request.user, 'racer')}) @login_required def racer_registration(request): user = request.user print(user.has_racer) if hasattr(request.user, \"racer\"): return HttpResponse(\"You have already got a racer\") else: if request.method == \"POST\": racer_form = RacerForm(request.POST) if racer_form.is_valid(): print(user) racer = racer_form.save(commit=False) racer.user = user racer.save() user.has_racer = True user.save() return redirect(\"profile\") else: racer_form = RacerForm() return render(request, \"racer_registration.html\", {\"racer_form\": racer_form}) @login_required def edit_user(request): if request.method == \"POST\": user_form = UserUpdateForm(request.POST, instance=request.user) if user_form.is_valid(): user_form.save() return redirect('profile') else: user_form = UserUpdateForm(instance=request.user) return render(request, \"edit_user.html\", {\"user_form\": user_form}, ) @login_required def change_password(request): if request.method == \"POST\": password_form = PasswordChangeForm(request.user, request.POST) if password_form.is_valid(): user = password_form.save() update_session_auth_hash(request, user) return redirect(\"profile\") else: password_form = PasswordChangeForm(request.user) return render(request, \"change_password.html\", {\"password_form\": password_form, }) @login_required() def edit_racer(request): if request.method == \"POST\": racer_form = RacerForm(request.POST, instance=request.user.racer) if racer_form.is_valid(): racer_form.save() return redirect(\"profile\") else: if hasattr(request.user, \"racer\"): racer_form = RacerForm(instance=getattr(request.user, \"racer\", None)) else: racer_form = None return render(request, \"edit_racer.html\", {\"racer_form\": racer_form, }) @login_required def race_comments(request, race_id): race = get_object_or_404(Race, id=race_id) comments = Comment.objects.filter(race=race) if request.method == \"POST\": form = CommentForm(request.POST) if form.is_valid(): comment = form.save(commit=False) comment.race = race comment.author = request.user comment.save() else: form = CommentForm() return render(request, \"race_comments.html\", {\"race\": race, \"comments\": comments, \"form\": form}) @login_required def races_list(request): races = Race.objects.all() race_connections = RaceConnection.objects.filter(racer=request.user.racer).values(\"race\") # print(race_connections) racer_races = [] for race_connection in race_connections: racer_races.append(race_connection['race']) # print(racer_races) return render(request, \"races_list.html\", {\"races\": races, \"race_connections\": racer_races}) @login_required def delete_account(request): if request.method == \"POST\": request.user.delete() return redirect(\"index\") return render(request, \"delete_account.html\") @login_required def create_race_connection(request, race_id): user = request.user if not (hasattr(user, \"racer\")): return HttpResponse(\"You have not got a racer\") else: try: race_connection = RaceConnection() race = Race.objects.get(pk=race_id) race_connection.race = race race_connection.racer = user.racer race_connection.save() except Exception as ex: print(ex) return HttpResponse('You have already registrated') return redirect(\"races_list\") return redirect(\"races_list\") def delete_race_connection(request, race_id): racer = request.user.racer race = Race.objects.get(pk=race_id) RaceConnection.objects.filter(racer=racer, race=race).delete() return redirect(\"races_list\")","title":"views.py:"},{"location":"lab_2/#formspy","text":"class LoginForm(forms.Form): username = forms.CharField() password = forms.CharField(widget=forms.PasswordInput) class RegistrationForm(forms.ModelForm): class Meta: model = User fields = [\"username\", \"password\", \"first_name\", \"last_name\"] class RacerForm(forms.ModelForm): class Meta: model = Racer fields = [\"team\", \"car\", \"description\", \"experience\", \"type\"] class UserUpdateForm(forms.ModelForm): class Meta: model = User fields = [\"first_name\", \"last_name\"] class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"comment_type\", \"rating\", \"text\"] class RaceConnectionForm(forms.ModelForm): class Meta: model = RaceConnection fields = [\"race\"]","title":"forms.py:"},{"location":"lab_2/#urlspy","text":"urlpatterns = [ path('admin/', admin.site.urls), path(\"\", views.index, name=\"index\"), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), path('profile/', views.profile, name='profile'), path(\"registration/\", views.registration, name=\"registration\"), path(\"racer_registration/\", views.racer_registration, name=\"racer_registration\"), path(\"edit_user/\", views.edit_user, name=\"edit_user\"), path(\"change_password/\", views.change_password, name=\"change_password\"), path(\"edit_racer/\", views.edit_racer, name=\"edit_racer\"), path(\"races/comments/<int:race_id>/\", views.race_comments, name=\"race_comments\"), path(\"races/\", views.races_list, name=\"races_list\"), path(\"profile/delete/\", views.delete_account, name=\"delete_account\"), path(\"create_race_connection/<int:race_id>/\", views.create_race_connection, name=\"create_race_connection\"), path(\"delete_race_connection/<int:race_id>\", views.delete_race_connection, name=\"delete_race_connection\") ]","title":"urls.py:"},{"location":"lab_2/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab_2/#_3","text":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:"},{"location":"lab_2/#_4","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:"},{"location":"lab_2/#_5","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438:"},{"location":"lab_2/#_6","text":"","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c:"},{"location":"lab_2/#_7","text":"","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:"},{"location":"lab_2/#_8","text":"","title":"\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f:"},{"location":"lab_2/#_9","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u043e\u043d\u0449\u0438\u043a\u0430:"},{"location":"lab_2/#_10","text":"","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u0449\u0438\u043a\u0430:"},{"location":"lab_2/#_11","text":"","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438:"},{"location":"lab_2/#_12","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u043d\u043e\u043a:"},{"location":"lab_2/#_13","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0433\u043e\u043d\u043a\u0443:"},{"location":"lab_2/#_14","text":"","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443:"},{"location":"lab_2/#_15","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0433\u043e\u043d\u043a\u0435:"},{"location":"lab_2/#_16","text":"","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0433\u043e\u043d\u043a\u0435:"},{"location":"lab_2/#_17","text":"","title":"\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438:"},{"location":"lab_2/#_18","text":"","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438:"},{"location":"lab_2/#_19","text":"","title":"\u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u043f\u0440\u043e\u0444\u0438\u043b\u044f:"},{"location":"lab_2/#_20","text":"","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430:"}]}