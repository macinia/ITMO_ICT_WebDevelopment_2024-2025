{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#3339","title":"\u041a\u043e\u0441\u043c\u0430\u0447 \u041c\u0430\u0440\u0438\u044f \u041a3339","text":""},{"location":"lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162","text":"<p>\u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.</p>"},{"location":"lab2/#_1","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab2/#modelspy","title":"models.py:","text":"<pre><code>class User(AbstractUser):\nfirst_name = models.CharField(max_length=30)\nlast_name = models.CharField(max_length=30)\nhas_racer = models.BooleanField(default=False)\n\ndef __str__(self):\n    return f\"{self.first_name} {self.last_name}\"\n\n\nclass Racer(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    team = models.CharField(max_length=100)\n    car = models.CharField(max_length=100)\n    description = models.TextField()\n    experience = models.IntegerField()\n    type = models.CharField(max_length=100)\n\n\nclass Race(models.Model):\n    name = models.CharField(max_length=100)\n    date = models.DateTimeField()\n    winner = models.ForeignKey(Racer, on_delete=models.SET_NULL, blank=True, null=True)\n\n    def __str__(self):\n        return f\"{self.name}\"\n\n\nclass RaceConnection(models.Model):\n    racer = models.ForeignKey(Racer, on_delete=models.CASCADE)\n    race = models.ForeignKey(Race, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('racer', 'race')\n\n\nclass Comment(models.Model):\n    COMMENT_TYPES = (\n        (\"cooperation\", \"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e\"),\n        (\"race\", \"\u0413\u043e\u043d\u043a\u0430\"),\n        (\"other\", \"\u0414\u0440\u0443\u0433\u043e\u0435\")\n    )\n    race = models.ForeignKey(Race, on_delete=models.CASCADE)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    text = models.TextField()\n    comment_type = models.CharField(max_length=20, choices=COMMENT_TYPES)\n    rating = models.IntegerField(\n        validators=[MinValueValidator(0), MaxValueValidator(10)]\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n</code></pre>"},{"location":"lab2/#viewspy","title":"views.py:","text":"<pre><code>def user_logout(request):\nlogout(request)\nreturn render(request, 'logout.html')\n\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            cd = form.cleaned_data\n            user = authenticate(username=cd['username'], password=cd['password'])\n            if user is not None:\n                if user.is_active:\n                    login(request, user)\n                    return redirect('profile')\n                else:\n                    return HttpResponse('Disabled account')\n            else:\n                return HttpResponse('Invalid login or password')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef registration(request):\n    if request.method == \"POST\":\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            user.set_password(user.password)\n            user.save()\n            return redirect(\"login\")\n    else:\n        form = RegistrationForm()\n\n    return render(request, \"registration.html\", {\"user_form\": form})\n\n\ndef index(request):\n    return render(request, \"index.html\")\n\n\n@login_required\ndef profile(request):\n    return render(request, 'profile.html', {'section': 'profile', 'has_racer': hasattr(request.user, 'racer')})\n\n\n@login_required\ndef racer_registration(request):\n    user = request.user\n    print(user.has_racer)\n    if hasattr(request.user, \"racer\"):\n        return HttpResponse(\"You have already got a racer\")\n    else:\n        if request.method == \"POST\":\n\n            racer_form = RacerForm(request.POST)\n            if racer_form.is_valid():\n                print(user)\n                racer = racer_form.save(commit=False)\n                racer.user = user\n                racer.save()\n                user.has_racer = True\n                user.save()\n                return redirect(\"profile\")\n        else:\n            racer_form = RacerForm()\n\n    return render(request, \"racer_registration.html\", {\"racer_form\": racer_form})\n\n\n@login_required\ndef edit_user(request):\n    if request.method == \"POST\":\n        user_form = UserUpdateForm(request.POST, instance=request.user)\n        if user_form.is_valid():\n            user_form.save()\n            return redirect('profile')\n    else:\n        user_form = UserUpdateForm(instance=request.user)\n    return render(request, \"edit_user.html\", {\"user_form\": user_form}, )\n\n\n@login_required\ndef change_password(request):\n    if request.method == \"POST\":\n        password_form = PasswordChangeForm(request.user, request.POST)\n\n        if password_form.is_valid():\n            user = password_form.save()\n            update_session_auth_hash(request, user)\n            return redirect(\"profile\")\n    else:\n        password_form = PasswordChangeForm(request.user)\n    return render(request, \"change_password.html\", {\"password_form\": password_form, })\n\n\n@login_required()\ndef edit_racer(request):\n    if request.method == \"POST\":\n        racer_form = RacerForm(request.POST, instance=request.user.racer)\n        if racer_form.is_valid():\n            racer_form.save()\n            return redirect(\"profile\")\n    else:\n        if hasattr(request.user, \"racer\"):\n            racer_form = RacerForm(instance=getattr(request.user, \"racer\", None))\n        else:\n            racer_form = None\n    return render(request, \"edit_racer.html\", {\"racer_form\": racer_form, })\n\n\n@login_required\ndef race_comments(request, race_id):\n    race = get_object_or_404(Race, id=race_id)\n    comments = Comment.objects.filter(race=race)\n    if request.method == \"POST\":\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.race = race\n            comment.author = request.user\n            comment.save()\n    else:\n        form = CommentForm()\n    return render(request, \"race_comments.html\", {\"race\": race, \"comments\": comments, \"form\": form})\n\n\n@login_required\ndef races_list(request):\n    races = Race.objects.all()\n    race_connections = RaceConnection.objects.filter(racer=request.user.racer).values(\"race\")\n    # print(race_connections)\n    racer_races = []\n    for race_connection in race_connections:\n        racer_races.append(race_connection['race'])\n    # print(racer_races)\n    return render(request, \"races_list.html\", {\"races\": races, \"race_connections\": racer_races})\n\n\n@login_required\ndef delete_account(request):\n    if request.method == \"POST\":\n        request.user.delete()\n        return redirect(\"index\")\n    return render(request, \"delete_account.html\")\n\n\n@login_required\ndef create_race_connection(request, race_id):\n    user = request.user\n    if not (hasattr(user, \"racer\")):\n        return HttpResponse(\"You have not got a racer\")\n    else:\n        try:\n            race_connection = RaceConnection()\n            race = Race.objects.get(pk=race_id)\n            race_connection.race = race\n            race_connection.racer = user.racer\n            race_connection.save()\n        except Exception as ex:\n            print(ex)\n            return HttpResponse('You have already registrated')\n        return redirect(\"races_list\")\n    return redirect(\"races_list\")\n\n\ndef delete_race_connection(request, race_id):\n    racer = request.user.racer\n    race = Race.objects.get(pk=race_id)\n    RaceConnection.objects.filter(racer=racer, race=race).delete()\n    return redirect(\"races_list\")\n</code></pre>"},{"location":"lab2/#formspy","title":"forms.py:","text":"<pre><code>class LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\n\nclass RegistrationForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\"username\", \"password\", \"first_name\", \"last_name\"]\n\n\nclass RacerForm(forms.ModelForm):\n    class Meta:\n        model = Racer\n        fields = [\"team\", \"car\", \"description\", \"experience\", \"type\"]\n\n\nclass UserUpdateForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\"first_name\", \"last_name\"]\n\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = [\"comment_type\", \"rating\", \"text\"]\n\n\nclass RaceConnectionForm(forms.ModelForm):\n    class Meta:\n        model = RaceConnection\n        fields = [\"race\"]\n</code></pre>"},{"location":"lab2/#urlspy","title":"urls.py:","text":"<pre><code>urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"\", views.index, name=\"index\"),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('profile/', views.profile, name='profile'),\n    path(\"registration/\", views.registration, name=\"registration\"),\n    path(\"racer_registration/\", views.racer_registration, name=\"racer_registration\"),\n    path(\"edit_user/\", views.edit_user, name=\"edit_user\"),\n    path(\"change_password/\", views.change_password, name=\"change_password\"),\n    path(\"edit_racer/\", views.edit_racer, name=\"edit_racer\"),\n    path(\"races/comments/&lt;int:race_id&gt;/\", views.race_comments, name=\"race_comments\"),\n    path(\"races/\", views.races_list, name=\"races_list\"),\n    path(\"profile/delete/\", views.delete_account, name=\"delete_account\"),\n    path(\"create_race_connection/&lt;int:race_id&gt;/\", views.create_race_connection, name=\"create_race_connection\"),\n    path(\"delete_race_connection/&lt;int:race_id&gt;\", views.delete_race_connection, name=\"delete_race_connection\")\n]\n</code></pre>"},{"location":"lab2/#_2","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":""},{"location":"lab2/#_3","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:","text":""},{"location":"lab2/#_4","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:","text":""},{"location":"lab2/#_5","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438:","text":""},{"location":"lab2/#_6","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c:","text":""},{"location":"lab2/#_7","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":""},{"location":"lab2/#_8","title":"\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f:","text":""},{"location":"lab2/#_9","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u043e\u043d\u0449\u0438\u043a\u0430:","text":""},{"location":"lab2/#_10","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u0449\u0438\u043a\u0430:","text":""},{"location":"lab2/#_11","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438:","text":""},{"location":"lab2/#_12","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u043d\u043e\u043a:","text":""},{"location":"lab2/#_13","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0433\u043e\u043d\u043a\u0443:","text":""},{"location":"lab2/#_14","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443:","text":""},{"location":"lab2/#_15","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0433\u043e\u043d\u043a\u0435:","text":""},{"location":"lab2/#_16","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0433\u043e\u043d\u043a\u0435:","text":""},{"location":"lab2/#_17","title":"\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438:","text":""},{"location":"lab2/#_18","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0433\u043e\u043d\u043a\u0438:","text":""},{"location":"lab2/#_19","title":"\u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u043f\u0440\u043e\u0444\u0438\u043b\u044f:","text":""},{"location":"lab2/#_20","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430:","text":""}]}