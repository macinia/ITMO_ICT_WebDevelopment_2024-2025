{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"task_1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b server.py: import socket server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server.bind(('', 14900)) data, client_address = server.recvfrom(16384) print(data.decode(\"UTF-8\")) server.sendto(b\"Hello, client\", client_address) server.close() client.py: import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client.sendto(b\"Hello, server\", server_address) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"task_1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"task_1/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_1/#serverpy","text":"import socket server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server.bind(('', 14900)) data, client_address = server.recvfrom(16384) print(data.decode(\"UTF-8\")) server.sendto(b\"Hello, client\", client_address) server.close()","title":"server.py:"},{"location":"task_1/#clientpy","text":"import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client.sendto(b\"Hello, server\", server_address) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close()","title":"client.py:"},{"location":"task_1/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"task_2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b server.py import socket from math import sqrt def calculate_discriminant(a, b, c): return b ** 2 - 4 * a * c def get_answer(a, b, c): discriminant = calculate_discriminant(a, b, c) if discriminant < 0: return 'Error' elif discriminant == 0: x = -(b) / (2 * a) return str(x) else: x1 = (-(b) + sqrt(discriminant)) / (2 * a) x2 = (-(b) - sqrt(discriminant)) / (2 * a) return f\"{x1}, {x2}\" server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) client_socket, client_address = server.accept() data = client_socket.recvfrom(16384)[0] coefficients = list(map(int, data.decode(\"UTF-8\").split())) answer = get_answer(*coefficients) client_socket.send(bytes(answer, 'UTF-8')) client_socket.close() server.close() client.py import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: coefficients = list(map(int, input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b a, b, c: \").split())) except Exception: coefficients = None print('\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432!') if coefficients is not None: coefficients = bytes(' '.join([str(coefficient) for coefficient in coefficients]), 'UTF-8') client.connect(server_address) client.send(coefficients) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"task_2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"task_2/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_2/#serverpy","text":"import socket from math import sqrt def calculate_discriminant(a, b, c): return b ** 2 - 4 * a * c def get_answer(a, b, c): discriminant = calculate_discriminant(a, b, c) if discriminant < 0: return 'Error' elif discriminant == 0: x = -(b) / (2 * a) return str(x) else: x1 = (-(b) + sqrt(discriminant)) / (2 * a) x2 = (-(b) - sqrt(discriminant)) / (2 * a) return f\"{x1}, {x2}\" server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) client_socket, client_address = server.accept() data = client_socket.recvfrom(16384)[0] coefficients = list(map(int, data.decode(\"UTF-8\").split())) answer = get_answer(*coefficients) client_socket.send(bytes(answer, 'UTF-8')) client_socket.close() server.close()","title":"server.py"},{"location":"task_2/#clientpy","text":"import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: coefficients = list(map(int, input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b a, b, c: \").split())) except Exception: coefficients = None print('\u041e\u0448\u0438\u0431\u043a\u0430! \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432!') if coefficients is not None: coefficients = bytes(' '.join([str(coefficient) for coefficient in coefficients]), 'UTF-8') client.connect(server_address) client.send(coefficients) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close()","title":"client.py"},{"location":"task_2/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"task_3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b server.py import socket html_file = open('index.html') html_data = '\\n'.join(html_file.readlines()) response_type = \"HTTP/1.1 200 OK\" content_type = \"Content-Type: text/html\" server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) client_socket, client_address = server.accept() answer = f\"{response_type}\\n{content_type}\\n\\n{html_data}\" client_socket.send(bytes(answer, 'UTF-8')) client_socket.close() server.close() client.py import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client.connect(server_address) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() index.html <h1>Hello, client!</h1> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"task_3/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"task_3/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_3/#serverpy","text":"import socket html_file = open('index.html') html_data = '\\n'.join(html_file.readlines()) response_type = \"HTTP/1.1 200 OK\" content_type = \"Content-Type: text/html\" server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) client_socket, client_address = server.accept() answer = f\"{response_type}\\n{content_type}\\n\\n{html_data}\" client_socket.send(bytes(answer, 'UTF-8')) client_socket.close() server.close()","title":"server.py"},{"location":"task_3/#clientpy","text":"import socket server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client.connect(server_address) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close()","title":"client.py"},{"location":"task_3/#indexhtml","text":"<h1>Hello, client!</h1>","title":"index.html"},{"location":"task_3/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"task_4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b server.py import socket import threading from datetime import datetime users = [] server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) def print_message(data): message_time = datetime.now() message_hour = str(message_time.hour).ljust(2, '0') message_minute = str(message_time.minute).ljust(2, '0') print(f\"{message_hour}:{message_minute} - {data}\") def send_message(data, sender_id): message_time = datetime.now() message_hour = str(message_time.hour).ljust(2, '0') message_minute = str(message_time.minute).ljust(2, '0') data = f\"{message_hour}:{message_minute} - {data}\".encode('utf-8') for user_index, user in enumerate(users): if user_index + 1 != sender_id: user.send(data) def listen(client_socket): while True: data = client_socket.recv(16384) user_id = users.index(client_socket) + 1 line = f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c #{user_id} - {data.decode('UTF-8')}\" print_message(line) send_message(line, user_id) while True: client_socket, client_address = server.accept() if client_socket not in users: users.append(client_socket) user_id = users.index(client_socket) + 1 line = f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c #{user_id} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\" print_message(line) send_message(line, user_id) listen_thread = threading.Thread(target=listen, args=(client_socket,)) listen_thread.start() server.close() client.py import socket import threading server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) def listen(): while True: data = client.recv(16384) print(data.decode('UTF-8')) def polling(): while True: data = input() client.send(data.encode('utf-8')) listen_thread = threading.Thread(target=listen) listen_thread.start() polling_thread = threading.Thread(target=polling) polling_thread.start() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"task_4/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"task_4/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_4/#serverpy","text":"import socket import threading from datetime import datetime users = [] server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('', 14900)) server.listen(1) def print_message(data): message_time = datetime.now() message_hour = str(message_time.hour).ljust(2, '0') message_minute = str(message_time.minute).ljust(2, '0') print(f\"{message_hour}:{message_minute} - {data}\") def send_message(data, sender_id): message_time = datetime.now() message_hour = str(message_time.hour).ljust(2, '0') message_minute = str(message_time.minute).ljust(2, '0') data = f\"{message_hour}:{message_minute} - {data}\".encode('utf-8') for user_index, user in enumerate(users): if user_index + 1 != sender_id: user.send(data) def listen(client_socket): while True: data = client_socket.recv(16384) user_id = users.index(client_socket) + 1 line = f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c #{user_id} - {data.decode('UTF-8')}\" print_message(line) send_message(line, user_id) while True: client_socket, client_address = server.accept() if client_socket not in users: users.append(client_socket) user_id = users.index(client_socket) + 1 line = f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c #{user_id} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\" print_message(line) send_message(line, user_id) listen_thread = threading.Thread(target=listen, args=(client_socket,)) listen_thread.start() server.close()","title":"server.py"},{"location":"task_4/#clientpy","text":"import socket import threading server_address = ('localhost', 14900) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) def listen(): while True: data = client.recv(16384) print(data.decode('UTF-8')) def polling(): while True: data = input() client.send(data.encode('utf-8')) listen_thread = threading.Thread(target=listen) listen_thread.start() polling_thread = threading.Thread(target=polling) polling_thread.start()","title":"client.py"},{"location":"task_4/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"task_5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py import socket import sys class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen() while True: client_socket, client_address = server.accept() self.serve_client(client_socket) def serve_client(self, client_socket): data, http_method, params_dict = self.parse_request(client_socket) headers = self.parse_headers(data) resp = self.handle_request(http_method, params_dict) self.send_response(client_socket, resp) def parse_request(self, client_socket): data = client_socket.recv(16384).decode(\"UTF-8\").split('\\n') http_method, http_url, http_version = data[0].split() params_dict = {} try: params = http_url.split(\"?\")[1].split(\"&\") except Exception as e: print(str(e)) params = [] if http_url == '/favicon.ico': params_dict = {} for param in params: name, value = param.split('=') params_dict[name] = value return data, http_method, params_dict def parse_headers(self, data): headers = [] for line in data: if line == '': break headers.append(line) return headers def handle_request(self, http_method, params_dict): if http_method == 'POST': name = params_dict['name'] value = params_dict['value'] if name in self.marks: self.marks[name].append(value) else: self.marks[name] = [value] return Response(200, 'OK', body='OK') elif http_method == 'GET': if params_dict == {}: return Response(404, 'Not found') name = params_dict['name'] if name in self.marks: marks = self.marks[name] return Response(200, 'OK', body=f\"<b>{name}: {marks}</b>\") else: return Response(404, 'Not found') def send_response(self, client_socket, resp): response = f\"HTTP/1.1 {resp.status} {resp.reason}\\nContent-Type: text/html\\n\\n{resp.body}\" client_socket.send(response.encode(\"UTF-8\")) client_socket.close() if __name__ == '__main__': host = 'localhost' port = 14900 server = MyHTTPServer(host, port) server.serve_forever() client.py import socket server_address = ('localhost', 14900) def send_mark(name, value): http_method = 'POST' http_url = f\"isu.ifmo.ru/pls/apex/f?name={name}&value={value}\" http_version = \"HTTP/1.1\" data = f\"{http_method} {http_url} {http_version}\\nHost: example.local\\n\" client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) client.send(bytes(data, 'UTF-8')) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() def get_marks(name): http_method = 'GET' http_url = f\"isu.ifmo.ru/pls/apex/f?name={name}\" http_version = \"HTTP/1.1\" data = f\"{http_method} {http_url} {http_version}\\nHost: example.local\\n\" client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) client.send(bytes(data, 'UTF-8')) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() send_mark('\u041e\u041e\u041f', 5) get_marks('\u041e\u041e\u041f') get_marks('\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430') \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"task_5/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"task_5/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task_5/#serverpy","text":"import socket import sys class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen() while True: client_socket, client_address = server.accept() self.serve_client(client_socket) def serve_client(self, client_socket): data, http_method, params_dict = self.parse_request(client_socket) headers = self.parse_headers(data) resp = self.handle_request(http_method, params_dict) self.send_response(client_socket, resp) def parse_request(self, client_socket): data = client_socket.recv(16384).decode(\"UTF-8\").split('\\n') http_method, http_url, http_version = data[0].split() params_dict = {} try: params = http_url.split(\"?\")[1].split(\"&\") except Exception as e: print(str(e)) params = [] if http_url == '/favicon.ico': params_dict = {} for param in params: name, value = param.split('=') params_dict[name] = value return data, http_method, params_dict def parse_headers(self, data): headers = [] for line in data: if line == '': break headers.append(line) return headers def handle_request(self, http_method, params_dict): if http_method == 'POST': name = params_dict['name'] value = params_dict['value'] if name in self.marks: self.marks[name].append(value) else: self.marks[name] = [value] return Response(200, 'OK', body='OK') elif http_method == 'GET': if params_dict == {}: return Response(404, 'Not found') name = params_dict['name'] if name in self.marks: marks = self.marks[name] return Response(200, 'OK', body=f\"<b>{name}: {marks}</b>\") else: return Response(404, 'Not found') def send_response(self, client_socket, resp): response = f\"HTTP/1.1 {resp.status} {resp.reason}\\nContent-Type: text/html\\n\\n{resp.body}\" client_socket.send(response.encode(\"UTF-8\")) client_socket.close() if __name__ == '__main__': host = 'localhost' port = 14900 server = MyHTTPServer(host, port) server.serve_forever()","title":"\u041a\u043e\u0434 server.py"},{"location":"task_5/#clientpy","text":"import socket server_address = ('localhost', 14900) def send_mark(name, value): http_method = 'POST' http_url = f\"isu.ifmo.ru/pls/apex/f?name={name}&value={value}\" http_version = \"HTTP/1.1\" data = f\"{http_method} {http_url} {http_version}\\nHost: example.local\\n\" client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) client.send(bytes(data, 'UTF-8')) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() def get_marks(name): http_method = 'GET' http_url = f\"isu.ifmo.ru/pls/apex/f?name={name}\" http_version = \"HTTP/1.1\" data = f\"{http_method} {http_url} {http_version}\\nHost: example.local\\n\" client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(server_address) client.send(bytes(data, 'UTF-8')) data = client.recv(16384) print(data.decode(\"UTF-8\")) client.close() send_mark('\u041e\u041e\u041f', 5) get_marks('\u041e\u041e\u041f') get_marks('\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430')","title":"client.py"},{"location":"task_5/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"}]}